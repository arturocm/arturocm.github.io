mapa <- tryCatch(denue_inegi(latitud,longitud, token_denue, metros = 5000, keyword = "farmacias"), error = function(e){})
mapa
unique(mapa$Razon)
grid_map2 <- function(location = a){
output <- data.frame()
for (i in 1:nrow(location)){
mapa <- tryCatch(denue_inegi(location[i,1],location[i,2], token_denue, metros = 5000, keyword = "farmacia"), error = function(e){})
output <- rbind(output,mapa)
print(i)
}
return (unique(output))
}
mapa <- grid_map2(a)
dim(mapa)
review_text <- paste(mapa$Razon, collapse=" ")
review_source <- VectorSource(review_text)
corpus <- Corpus(review_source)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
dtm <- DocumentTermMatrix(corpus)
dtm2 <- as.matrix(dtm)
frequency <- colSums(dtm2)
frequency <- sort(frequency, decreasing=TRUE)
head(frequency)
dtm2
frequency
unique(mapa$Razon)
> as.data.frame(table(mapa$Razon))
as.data.frame(table(mapa$Razon))
count(mapa, 'Razon')
library(plyr)
count(mapa, 'Razon')
count(mapa, 'Razon')
as.data.frame(table(mapa$Razon))
as.data.frame(table(mapa$Razon))
frequency <- sort(frequency, decreasing=TRUE)
t <- as.data.frame(table(mapa$Razon))
frequency <- sort(t, decreasing=TRUE)
t
?sort
sort(t)
t[desc(t$freq),]
?order
newdata <- t[order(-Freq),]
names(t)
newdata <- t[order(t$Freq),]
newdata
dim(mapa)
data_etl <- function(mapa=mapa){
benavides <- mapa[mapa$Nombre %like% "BENAVIDES" | mapa$Razon %like% "BENAVIDES",]
guadalajara <- mapa[mapa$Nombre %like% "GUADALAJARA" | mapa$Razon %like% "GUADALAJARA",]
chiapas <- mapa[mapa$Nombre %like% "CHIAPAS" | mapa$Razon %like% "CHIAPAS",]
similares <- mapa[mapa$Nombre %like% "SIMILARES" | mapa$Razon %like% "SIMILARES",]
benavides$type <- "BENAVIDES"
guadalajara$type <- "GUADALAJARA"
chiapas$type <- "CHIAPAS"
similares$type <- "SIMILARES"
output <- rbind(benavides,chiapas,guadalajara,similares)
return(output)
}
a <- nrow(mapa)
mapa <- data_etl(mapa)
library(data.table)
data_etl <- function(mapa=mapa){
benavides <- mapa[mapa$Nombre %like% "BENAVIDES" | mapa$Razon %like% "BENAVIDES",]
guadalajara <- mapa[mapa$Nombre %like% "GUADALAJARA" | mapa$Razon %like% "GUADALAJARA",]
chiapas <- mapa[mapa$Nombre %like% "CHIAPAS" | mapa$Razon %like% "CHIAPAS",]
similares <- mapa[mapa$Nombre %like% "SIMILARES" | mapa$Razon %like% "SIMILARES",]
benavides$type <- "BENAVIDES"
guadalajara$type <- "GUADALAJARA"
chiapas$type <- "CHIAPAS"
similares$type <- "SIMILARES"
output <- rbind(benavides,chiapas,guadalajara,similares)
return(output)
}
a <- nrow(mapa)
mapa <- data_etl(mapa)
dim(a)
dim(mapa)
a
pal <- colorFactor(c("blue","red", "cian","green"), domain = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 10) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"), opacity = .5)
?colorFactor
?palette
rainbow()
rainbow(4)
heat.colors(4)
pal <- colorFactor(c("#FF0000FF", "#FF8000FF", "#FFFF00FF", "#FFFF80FF"), domain = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 10) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"), opacity = .5)
map
heat.colors(4)
paste(heat.color(4),sep = ",")
paste(heat.colors(4),sep = ",")
paste0(heat.colors(4),sep = ",")
pal <- colorFactor(c("#FF0000FF", "#FF8000FF", "#FFFF00FF", "#FFFF80FF"), domain = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 10) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"), opacity = .5)
map
paste0(rainbow(4),sep = ",")
paste(rainbow(4),sep = ",")
pal <- colorFactor(c("#FF0000FF", "#80FF00FF", "#00FFFFFF", "#8000FFFF"), domain = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 10) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("BENAVIDES",
"CHIAPAS",
"GUADALAJARA",
"SIMILARES"), opacity = .5)
map
library(inegiR)
library(data.table)
library(leaflet)
source("/Users/arturocam/GitHub/extra/inegir_tokens.R")
#Cover Monterrey Metropolitan area 25.827886, -100.499367 to 25.617245, -100.113159
#Cover Hermosillo 29.169148, -111.078260 to 28.987318, -110.894239
#Mexico 32.511930, -117.236049 to 16.709315, -87.487558
grid <- function(lat1=25.827886, lon1=-100.499367, lat2=25.617245, lon2=-100.113159){
lat = 0.07
lon = 0.07
grid_output <- cbind(lat1,lon1)
x <- abs(round((lat1-lat2)/lat, digits = 0))+1
y <- abs(round((lon1-lon2)/lon, digits = 0))+1
for (i in 1:x){
for (j in 1:y){
la <- lat1-((i*lat)-lat)
lo <- lon1+((j*lon)-lon)
prev <- cbind(la,lo)
grid_output <- rbind(grid_output, prev)
}
}
return(grid_output)
}
grid_map <- function(location = a, key.word = "comercio al por menor"){
output <- data.frame()
for (i in 1:nrow(location)){
mapa <- tryCatch(denue_inegi(location[i,1],
location[i,2],
token_denue,
metros = 5000,
keyword = key.word),
error = function(e){})
output <- rbind(output,mapa)
print(i)
}
return (unique(output))
}
data_etl <- function(mapa=mapa){
oxxo <- mapa[mapa$Nombre %like% "OXXO" | mapa$Razon %like% "OXXO",]
seven <- mapa[mapa$Nombre %like% "ELEVEN" | mapa$Razon %like% "ELEVEN",]
extra <- mapa[mapa$Nombre %like% "EXTRA" | mapa$Razon %like% "EXTRA",]
oxxo$type <- "OXXO"
seven$type <- "SEVEN"
extra$type <- "EXTRA"
output <- rbind(oxxo,seven,extra)
return(output)
}
latitud = 25.650443
longitud = -100.289725
a <- as.data.frame(grid(29.169148, -111.078260, 28.987318, -110.894239))
mapa <- grid_map(a)
mapa <- data_etl(mapa)
pal <- colorFactor(c("blue","red", "green"), domain = c("EXTRA","OXXO", "SEVEN"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 10) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("EXTRA","OXXO", "SEVEN"), opacity = .5)
map
dim(a)
a[9]
a[9,]
latitud = 29.09915
longitud = -110.8683
pal <- colorFactor(c("blue","red", "green"), domain = c("EXTRA","OXXO", "SEVEN"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 10) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("EXTRA","OXXO", "SEVEN"), opacity = .5)
map
pal <- colorFactor(c("blue","red", "green"), domain = c("EXTRA","OXXO", "SEVEN"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 12) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("EXTRA","OXXO", "SEVEN"), opacity = .5)
map
a[7,]
latitud = 29.09915
longitud = -111.0083
pal <- colorFactor(c("blue","red", "green"), domain = c("EXTRA","OXXO", "SEVEN"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 12) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("EXTRA","OXXO", "SEVEN"), opacity = .5)
map
a[8,]
latitud = 29.09915
longitud = -110.9383
pal <- colorFactor(c("blue","red", "green"), domain = c("EXTRA","OXXO", "SEVEN"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 12) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("EXTRA","OXXO", "SEVEN"), opacity = .5)
map
pal <- colorFactor(c("blue","red", "green"), domain = c("EXTRA","OXXO", "SEVEN"))
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 11) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",pal = pal, values = c("EXTRA","OXXO", "SEVEN"), opacity = .5)
map
library(inegiR)
library(data.table)
library(leaflet)
#######################################################
################### Load Tokens #######################
#######################################################
source("/Users/arturocam/GitHub/extra/inegir_tokens.R")
#######################################################
##################### Functions #######################
#######################################################
###################### grid() #########################
# Used to "pack" circles over a rectangular area
# the output is a dataframe that can be use to loop
# through denue_inegi() funciton
# To cover Monterrey  area 25.827886, -100.499367 to 25.617245, -100.113159
# To cover Hermosillo area 29.169148, -111.078260 to 28.987318, -110.894239
# To cover Mexico (Country) 32.511930, -117.236049 to 16.709315, -87.487558
grid <- function(lat1=25.827886, lon1=-100.499367,
lat2=25.617245, lon2=-100.113159){
lat = 0.07
lon = 0.07
grid_output <- cbind(lat1,lon1)
x <- abs(round((lat1-lat2)/lat, digits = 0))+1
y <- abs(round((lon1-lon2)/lon, digits = 0))+1
for (i in 1:x){
for (j in 1:y){
la <- lat1-((i*lat)-lat)
lo <- lon1+((j*lon)-lon)
prev <- cbind(la,lo)
grid_output <- rbind(grid_output, prev)
}
}
return(as.data.frame(grid_output))
}
################## grid_map() ######################
# Used to loop a data.frame with coordenates through the
# through denue_inegi() funciton. The reazon why we need
# this formula is to bypass the error given by denue_inegi()
# when there are no results. This way the loop function
# continous until the last loop
### Note how at the end we remove duplicate values!
grid_map <- function(location = a,
key.word = "comercio al por menor"){
output <- data.frame()
for (i in 1:nrow(location)){
mapa <- tryCatch(denue_inegi(location[i,1],
location[i,2],
token_denue,
metros = 5000,
keyword = key.word),
error = function(e){})
output <- rbind(output,mapa)
print(i)
}
return (unique(output))
}
################## data_etl() #########################
# Used to clean the results to the top 3 Convenience
# Stores. You can modify this formula to give you the
# specific results that you like
data_etl <- function(mapa=mapa){
oxxo <- mapa[mapa$Nombre %like% "OXXO" | mapa$Razon %like% "OXXO",]
seven <- mapa[mapa$Nombre %like% "ELEVEN" | mapa$Razon %like% "ELEVEN",]
extra <- mapa[mapa$Nombre %like% "EXTRA" | mapa$Razon %like% "EXTRA",]
oxxo$type <- "OXXO"
seven$type <- "SEVEN"
extra$type <- "EXTRA"
output <- rbind(oxxo,seven,extra)
return(output)
}
#######################################################
##################### Analysis ########################
#######################################################
# Grid to cover Hermosillo area
a <- grid(29.169148, -111.078260, 28.987318, -110.894239)
# Loop through grid to search for all convinience stores
mapa <- grid_map(a)
# Filter the results to only major competitors
mapa <- data_etl(mapa)
# Coordetes to center the map (Hermosillo)
latitud = 29.09915
longitud = -110.9383
# Asign colors to each store
pal <- colorFactor(c("blue","red", "green"),
domain = c("EXTRA","OXXO", "SEVEN"))
# Use leaflet to map those coordenates
map <- leaflet() %>%
addTiles() %>%
setView(longitud, latitud, zoom = 11) %>%
addCircleMarkers(lat = mapa$Latitud,
lng = mapa$Longitud,
popup = mapa$Nombre,
radius = 3,
color = pal(mapa$type),
stroke = TRUE, fillOpacity = 0.5) %>%
addProviderTiles("CartoDB.Positron")   %>%
addLegend("bottomright",
pal = pal,
values = c("EXTRA","OXXO", "SEVEN"),
opacity = .5)
map
library(brocks)
blog_gen()
blog_gen()
blog_gen()
blog_serve()
blog_gen()
blog_gen()
library(brocks)
blog_gen()
blog_gen()
library(brocks)
blog_gen()
blog_serve()
blog_gen()
blog_serve()
blog_gen()
blog_gen()
blog_serve()
blog_gen()
library(brocks)
blog_serve()
?brocks
new_post("dataday-preview")
blog_gen()
blog_gen()
blog_gen()
library(brocks)
new_post(title="dataday-presentacion")
blog_gen()
library(brocks)
?brokcs
?brocks
??brocks
getwd()
blog_gen()
blog_serve()
blog_gen()
local({
# fall back on '/' if baseurl is not specified
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
knitr::opts_knit$set(base.url = baseurl)
# fall back on 'kramdown' if markdown engine is not specified
markdown = servr:::jekyll_config('.', 'markdown', 'kramdown')
# see if we need to use the Jekyll render in knitr
if (markdown == 'kramdown') {
knitr::render_jekyll()
} else knitr::render_markdown()
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# set where you want to host the figures (I store them in my Dropbox Public
# folder, and you might prefer putting them in GIT)
if (Sys.getenv('USER') == 'yihui') {
# these settings are only for myself, and they will not apply to you, but
# you may want to adapt them to your own website
knitr::opts_chunk$set(fig.path = sprintf('%s/', gsub('^.+/', '', d)))
knitr::opts_knit$set(
base.dir = '~/Dropbox/Public/jekyll/',
base.url = 'http://db.yihui.name/jekyll/'
)
}
knitr::opts_knit$set(width = 70)
knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)
brocks::htmlwidgets_deps(a, always = TRUE)
})
blog_gen(build.R)
blog_serve()
blog_serve()
blog_gen()
blog_serve()
getwd()
setwd("~/GitHub/arturocm.github.io/_drafts")
#!/usr/bin/env Rscript
library(knitr)
# Get the filename given as an argument in the shell.
args = commandArgs(TRUE)
filename = args[1]
# Check that it's a .Rmd file.
if(!grepl(".Rmd", filename)) {
stop("You must specify a .Rmd file.")
}
# Knit and place in _posts.
dir = paste0("../_posts/", Sys.Date(), "-")
output = paste0(dir, sub('.Rmd', '.md', filename))
knit(filename, output)
# Copy .png files to the images directory.
fromdir = "{{ site.url }}/images"
todir = "../images"
pics = list.files(fromdir, ".png")
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
file.copy(pics, todir)
filename
list.files()
args
setwd("~/GitHub/arturocm.github.io")
blog_serve()
blog_gen()
blog_serve()
blog_gen()
blog_gen()
