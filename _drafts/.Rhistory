draft$value.adj <- draft$value.adj * 1.09 / 1000000 #convert from euros to MM dlls
draft <- draft[!(is.na(draft$value.adj)),]
draft <- arrange(draft, desc(value.adj))
return(draft)
}
draft <- cleansing(team.value2)
#Set the color palet by player value
draft <- arrange(draft, value.adj)
set.color <- cbind.data.frame(value.adj = unique(draft$value.adj),
color.set =colorRampPalette(brewer.pal(9,"Spectral"))(length(unique(draft$value.adj))))
draft <- full_join(draft, as.data.table(set.color), by = "value.adj")
#### plot play
p <- plot_ly(data = draft,
y = team,
x = value.adj,
marker = list(color = color.set,
line= list(color='white',  # set bar border color
width=.5 )),     # set bar border width
opacity = .9,
group = value.adj,
type = "bar",
showlegend = FALSE,
bargap = 0.5,
text = name,
orientation = "h")
f1 <- list(
family = "Arial, sans-serif",
size = 18,
color = "lightgrey"
)
f2 <- list(
family = "Old Standard TT, serif",
size = 12,
color = "black"
)
x <- list(
title = "USD Million",
titlefont = f1,
showticklabels = TRUE,
tickfont = f2,
exponentformat = "e",
showexponent = "All"
)
y <- list(
title = "TEAM",
titlefont = f1,
showticklabels = TRUE,
tickfont = f2,
exponentformat = "e",
showexponent = "All"
)
m = list(l = 150, r = 20, b = 50, t = 20, pad = 4)
layout(p, hovermode = "closest", barmode = "stack",xaxis = x, yaxis = y, margin = m)
layout(p, title="Plot Title", hovermode = "closest", barmode = "stack",xaxis = x, yaxis = y, margin = m)
#### plot play
league.plot <- function(x = data, Plot.Title = "League"){
p <- plot_ly(data = x,
y = team,
x = value.adj,
marker = list(color = color.set,
line= list(color='white',  # set bar border color
width=.5 )),     # set bar border width
opacity = .9,
group = value.adj,
type = "bar",
showlegend = FALSE,
bargap = 0.5,
text = name,
orientation = "h")
f1 <- list(
family = "Arial, sans-serif",
size = 18,
color = "lightgrey"
)
f2 <- list(
family = "Old Standard TT, serif",
size = 12,
color = "black"
)
x <- list(
title = "USD Million",
titlefont = f1,
showticklabels = TRUE,
tickfont = f2,
exponentformat = "e",
showexponent = "All"
)
y <- list(
title = "TEAM",
titlefont = f1,
showticklabels = TRUE,
tickfont = f2,
exponentformat = "e",
showexponent = "All"
)
m = list(l = 150, r = 20, b = 50, t = 20, pad = 4)
layout(p,
title=Plot.Title,
hovermode = "closest",
barmode = "stack",
xaxis = x,
yaxis = y,
margin = m)
}
league.plot(draft, "Liga MX")
league.plot <- function(x = data, Plot.Title = "League"){
p <- plot_ly(data = x,
y = team,
x = value.adj,
marker = list(color = color.set,
line= list(color='white',  # set bar border color
width=.5 )),     # set bar border width
opacity = .9,
group = value.adj,
type = "bar",
showlegend = FALSE,
bargap = 0.5,
text = name,
orientation = "h")
f1 <- list(
family = "Arial, sans-serif",
size = 18,
color = "lightgrey"
)
f2 <- list(
family = "Old Standard TT, serif",
size = 12,
color = "black"
)
x <- list(
title = "USD Million",
titlefont = f1,
showticklabels = TRUE,
tickfont = f2,
exponentformat = "e",
showexponent = "All"
)
y <- list(
title = "TEAM",
titlefont = f1,
showticklabels = TRUE,
tickfont = f2,
exponentformat = "e",
showexponent = "All"
)
m = list(l = 150, r = 20, b = 50, t = 50, pad = 4)
layout(p,
title=Plot.Title,
hovermode = "closest",
barmode = "stack",
xaxis = x,
yaxis = y,
margin = m)
}
league.plot(draft, "Liga MX")
color.column <- function(x = data){
draft <- arrange(x, value.adj)
set.color <- cbind.data.frame(value.adj = unique(x$value.adj),
color.set =colorRampPalette(brewer.pal(9,"Spectral"))(length(unique(draft$value.adj))))
draft <- full_join(draft, as.data.table(set.color), by = "value.adj")
return(draft)
}
color.column <- function(x = data){
draft <- arrange(x, value.adj)
set.color <- cbind.data.frame(value.adj = unique(x$value.adj),
color.set =colorRampPalette(brewer.pal(9,"Spectral"))(length(unique(draft$value.adj))))
draft <- full_join(draft, as.data.table(set.color), by = "value.adj")
return(draft)
}
draft <- cleansing(color.column(team.value2))
draft <- cleansing(team.value2)
final.draft <- color.column(draft)
draft <- cleansing(team.value2)
final.draft <- color.column(draft)
league.plot(final.draft, "Liga MX")
team.value <- transfermarkt(url.mx)
draft <- cleansing(team.value)
final.draft <- color.column(draft)
league.plot(final.draft, "Liga MX")
color.column <- function(x = data){
draft <- arrange(x, value.adj)
set.color <- cbind.data.frame(value.adj = unique(x$value.adj),
color.set =colorRampPalette(brewer.pal(9,"Spectral"))(length(unique(x$value.adj))))
draft <- full_join(draft, as.data.table(set.color), by = "value.adj")
return(draft)
}
final.draft <- color.column(draft)
league.plot(final.draft, "Liga MX")
color.column <- function(x = data){
draft <- arrange(x, value.adj)
set.color <- cbind.data.frame(value.adj = unique(draft$value.adj),
color.set =colorRampPalette(brewer.pal(9,"Spectral"))(length(unique(draft$value.adj))))
draft <- full_join(draft, as.data.table(set.color), by = "value.adj")
return(draft)
}
final.draft <- color.column(draft)
league.plot(final.draft, "Liga MX")
dara.url <- "http://www.armchairanalysis.com/nfl_sample_2015.zip"
unzip(data.url)
dara.url <- "http://www.armchairanalysis.com/nfl_sample_2015.zip"
temp <- tempfile()
download.file(data.url,temp)
data <- read.table(unz(temp, "nfl_sample_2015.zip"))
unlink(temp)
dara.url <- "http://www.armchairanalysis.com/nfl_sample_2015.zip"
temp <- tempfile()
download.file(data.url,temp)
data <- unz(temp, "nfl_sample_2015.zip")
unlink(temp)
?download.file
dara.url <- "http://www.armchairanalysis.com/nfl_sample_2015.zip"
temp <- tempfile()
download.file(data.url,temp)
data <- unz(temp, "nfl_sample_2015.csv")
unlink(temp)
source('~/arturocm/learnbydoing/posts/ligamx.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("brocks", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/GitHub/test")
local({
# fall back on '/' if baseurl is not specified
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
knitr::opts_knit$set(base.url = baseurl)
# fall back on 'kramdown' if markdown engine is not specified
markdown = servr:::jekyll_config('.', 'markdown', 'kramdown')
# see if we need to use the Jekyll render in knitr
if (markdown == 'kramdown') {
knitr::render_jekyll()
} else knitr::render_markdown()
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# set where you want to host the figures (I store them in my Dropbox Public
# folder, and you might prefer putting them in GIT)
if (Sys.getenv('USER') == 'yihui') {
# these settings are only for myself, and they will not apply to you, but
# you may want to adapt them to your own website
knitr::opts_chunk$set(fig.path = sprintf('%s/', gsub('^.+/', '', d)))
knitr::opts_knit$set(
base.dir = '~/Dropbox/Public/jekyll/',
base.url = 'http://db.yihui.name/jekyll/'
)
}
knitr::opts_knit$set(width = 70)
knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)
brocks::htmlwidgets_deps(a, always = TRUE)
})
brocks::htmlwidgets_deps()
brocks::htmlwidgets_deps
setwd("~/GitHub/test/_drafts")
brocks::htmlwidgets_deps("inegir.Rmd")
brocks::htmlwidgets_deps(inegir.Rmd)
# Required for the htmlwidgets wrapper functions -----------------------------
# install.packages("devtools")
devtools::install_github("brendan-r/brocks")
# For knitr-jekyll, and the htmlwidgets stuff --------------------------------
install.packages(c(
"servr",
"knitr",
"metricsgraphics",
"leaflet",
"threejs",
"maps"
))
install.packages(c("servr", "knitr", "metricsgraphics", "leaflet",
))
install.packages(c(
+     "servr",
+     "knitr",
+     "metricsgraphics",
+     "leaflet")
)
install.packages(c(
+     "servr",
+     "knitr",
+     "metricsgraphics",
+     "leaflet"))
install.packages("servr")
install.packages("knitr")
install.packages("leaflet")
library("brocks", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(knitr)
local({
# fall back on '/' if baseurl is not specified
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
knitr::opts_knit$set(base.url = baseurl)
# fall back on 'kramdown' if markdown engine is not specified
markdown = servr:::jekyll_config('.', 'markdown', 'kramdown')
# see if we need to use the Jekyll render in knitr
if (markdown == 'kramdown') {
knitr::render_jekyll()
} else knitr::render_markdown()
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# set where you want to host the figures (I store them in my Dropbox Public
# folder, and you might prefer putting them in GIT)
if (Sys.getenv('USER') == 'yihui') {
# these settings are only for myself, and they will not apply to you, but
# you may want to adapt them to your own website
knitr::opts_chunk$set(fig.path = sprintf('%s/', gsub('^.+/', '', d)))
knitr::opts_knit$set(
base.dir = '~/Dropbox/Public/jekyll/',
base.url = 'http://db.yihui.name/jekyll/'
)
}
knitr::opts_knit$set(width = 70)
knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)
brocks::htmlwidgets_deps(a, always = TRUE)
})
librar(servr)
library(servr)
local({
# fall back on '/' if baseurl is not specified
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
knitr::opts_knit$set(base.url = baseurl)
# fall back on 'kramdown' if markdown engine is not specified
markdown = servr:::jekyll_config('.', 'markdown', 'kramdown')
# see if we need to use the Jekyll render in knitr
if (markdown == 'kramdown') {
knitr::render_jekyll()
} else knitr::render_markdown()
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# set where you want to host the figures (I store them in my Dropbox Public
# folder, and you might prefer putting them in GIT)
if (Sys.getenv('USER') == 'yihui') {
# these settings are only for myself, and they will not apply to you, but
# you may want to adapt them to your own website
knitr::opts_chunk$set(fig.path = sprintf('%s/', gsub('^.+/', '', d)))
knitr::opts_knit$set(
base.dir = '~/Dropbox/Public/jekyll/',
base.url = 'http://db.yihui.name/jekyll/'
)
}
knitr::opts_knit$set(width = 70)
knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)
brocks::htmlwidgets_deps(a, always = TRUE)
})
spin_jekyll <- function(r_script){
#### packages ####
library("knitr")
library("printr")
library("stringr")
#### pars ####
t0 <- Sys.time()
folder_name <- gsub("^\\d{4}-\\d{2}-\\d{2}-|\\.R$", "", basename(r_script))
image_folder <- sprintf("images/%s/", folder_name)
#### options ####
options(digits = 3, knitr.table.format = "markdown",
encoding = "UTF-8", stringsAsFactors = FALSE)
opts_chunk$set(fig.path = image_folder, fig.align = "center",
warning = FALSE, message = FALSE)
opts_knit$set(root.dir  = normalizePath("."))
knit_print.htmlwidget <<- function(x, ..., options = NULL){
wdgtclass <- setdiff(class(x), "htmlwidget")[1]
wdgtrndnm <- paste0(sample(letters, size = 7), collapse = "")
wdgtfname <- sprintf("htmlwidgets/%s/%s_%s.html", folder_name, wdgtclass, wdgtrndnm)
suppressWarnings(try(dir.create(sprintf(sprintf("htmlwidgets/%s", folder_name)))))
htmlwidgets::saveWidget(x, file = "wdgettemp.html", selfcontained = TRUE)
file.copy("wdgettemp.html", wdgtfname, overwrite = TRUE)
file.remove("wdgettemp.html")
w <- ifelse(str_detect(x$width, "%"), x$width, paste0(x$width + 25, "px"))
h <- ifelse(str_detect(x$height, "%"), x$width, paste0(x$height + 25, "px"))
iframetxt <- sprintf("<iframe src=\"/%s\" width=\"%s\" height=\"%s\"></iframe>",
wdgtfname, w, h)
knitr::asis_output(iframetxt)
}
#### removing widgets if exists ####
if ( length(dir(sprintf("htmlwidgets/%s", folder_name), full.names = TRUE)) > 0) {
fs <- dir(sprintf("htmlwidgets/%s", folder_name), full.names = TRUE)
lapply(fs, file.remove)
}
#### knitting ####
message(sprintf("knitting %s", basename(r_script)))
spin(r_script, envir = new.env())
r_md <- sub(".R$", ".md", basename(r_script))
r_html <- sub(".R$", ".html", basename(r_script))
#### changing images' url ####
message("changing url path of images")
r_md_txt <- readLines(r_md)
r_md_txt <- gsub("<img src=\"images/", "<img src=\"/images/", r_md_txt)
#### moving files ####
message("moving md file to _posts/ folder")
writeLines(r_md_txt, r_md)
file.copy(from = r_md, to = sprintf("_posts/%s", r_md), overwrite = TRUE)
##### removing temp files ####
message("removing temporal files")
file.remove(r_md)
file.remove(r_html)
if (file.exists(sprintf("_rposts/%s", r_html))) {
file.remove(sprintf("_rposts/%s", r_html))
}
#### finished ####
message(sprintf("ready: %s", sprintf("_posts/%s", r_md)))
diff <- Sys.time() - t0
message(sprintf("time to spin: %s %s", round(diff, 2), attr(diff, "units")))
invisible()
}
iframeFromWidget <- function(wdgt, filename, height = 400){
htmlwidgets::saveWidget(wdgt, file = filename, selfcontained = TRUE, libdir = NULL)
file.copy(filename, sprintf("htmlwidgets/%s", filename), overwrite = TRUE)
file.remove(filename)
tplt <- '<iframe src="/htmlwidgets/{{ fn }}" height={{ h }}"></iframe>'
whisker::whisker.render(tplt, list(fn = filename, h = height))
}
getwd()
ls()
list.files()
spin_jekyll("inegir.Rmd")
install.packages("printr")
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
spin_jekyll("inegir.Rmd")
spin_jekyll <- function(r_script){
#### packages ####
library("knitr")
library("printr")
library("stringr")
#### pars ####
t0 <- Sys.time()
folder_name <- gsub("^\\d{4}-\\d{2}-\\d{2}-|\\.R$", "", basename(r_script))
image_folder <- sprintf("images/%s/", folder_name)
#### options ####
options(digits = 3, knitr.table.format = "markdown",
encoding = "UTF-8", stringsAsFactors = FALSE)
opts_chunk$set(fig.path = image_folder, fig.align = "center",
warning = FALSE, message = FALSE)
opts_knit$set(root.dir  = normalizePath("."))
knit_print.htmlwidget <<- function(x, ..., options = NULL){
wdgtclass <- setdiff(class(x), "htmlwidget")[1]
wdgtrndnm <- paste0(sample(letters, size = 7), collapse = "")
wdgtfname <- sprintf("htmlwidgets/%s/%s_%s.html", folder_name, wdgtclass, wdgtrndnm)
suppressWarnings(try(dir.create(sprintf(sprintf("htmlwidgets/%s", folder_name)))))
htmlwidgets::saveWidget(x, file = "wdgettemp.html", selfcontained = TRUE)
file.copy("wdgettemp.html", wdgtfname, overwrite = TRUE)
file.remove("wdgettemp.html")
w <- ifelse(str_detect(x$width, "%"), x$width, paste0(x$width + 25, "px"))
h <- ifelse(str_detect(x$height, "%"), x$width, paste0(x$height + 25, "px"))
iframetxt <- sprintf("<iframe src=\"/%s\" width=\"%s\" height=\"%s\"></iframe>",
wdgtfname, w, h)
knitr::asis_output(iframetxt)
}
#### removing widgets if exists ####
if ( length(dir(sprintf("htmlwidgets/%s", folder_name), full.names = TRUE)) > 0) {
fs <- dir(sprintf("htmlwidgets/%s", folder_name), full.names = TRUE)
lapply(fs, file.remove)
}
#### knitting ####
message(sprintf("knitting %s", basename(r_script)))
spin(r_script, envir = new.env())
r_md <- sub(".R$", ".md", basename(r_script))
r_html <- sub(".R$", ".html", basename(r_script))
#### changing images' url ####
message("changing url path of images")
r_md_txt <- readLines(r_md)
r_md_txt <- gsub("<img src=\"images/", "<img src=\"/images/", r_md_txt)
#### moving files ####
message("moving md file to _posts/ folder")
writeLines(r_md_txt, r_md)
file.copy(from = r_md, to = sprintf("_posts/%s", r_md), overwrite = TRUE)
##### removing temp files ####
message("removing temporal files")
file.remove(r_md)
file.remove(r_html)
if (file.exists(sprintf("_rposts/%s", r_html))) {
file.remove(sprintf("_rposts/%s", r_html))
}
#### finished ####
message(sprintf("ready: %s", sprintf("_posts/%s", r_md)))
diff <- Sys.time() - t0
message(sprintf("time to spin: %s %s", round(diff, 2), attr(diff, "units")))
invisible()
}
iframeFromWidget <- function(wdgt, filename, height = 400){
htmlwidgets::saveWidget(wdgt, file = filename, selfcontained = TRUE, libdir = NULL)
file.copy(filename, sprintf("htmlwidgets/%s", filename), overwrite = TRUE)
file.remove(filename)
tplt <- '<iframe src="/htmlwidgets/{{ fn }}" height={{ h }}"></iframe>'
whisker::whisker.render(tplt, list(fn = filename, h = height))
}
spin_jekyll("inegir.Rmd")
spin_jekyll("inegir.Rmd")
spin_jekyll("inegir.Rmd")
spin_jekyll("inegir.Rmd")
spin_jekyll("inegir.Rmd")
spin_jekyll("inegir.Rmd")
spin_jekyll("inegir.Rmd")
list.files()
spin_jekyll("ligamx.R")
spin_jekyll("ligamx.R")
league.plot(final.draft, "Liga MX")
setwd("~/GitHub/arturocm.github.io/_drafts")
spin_jekyll("inegir.R")
spin_jekyll("inegir.R")
spin_jekyll("inegir.R")
